#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'exportation'

require 'rubygems'
require 'commander'
require 'colorize'

class ExportationApplication
  include Commander::Methods

  def run
    program :name, 'Exportation'
    program :version, '0.1.0'
    program :description, 'CLI tool of easy exporting, encrypting, and decrypting of certificates and private keys.'

    command :export do |c|
      c.syntax = 'exportation export [options]'
      c.description = 'Exports certificate and private key from Keychain Access'
      c.option '--path STRING', String, 'Path to save certificate and private key'
      c.option '--filename STRING', String, 'File name to save certificate and private key as'
      c.option '--name STRING', String, 'Common name of the cert as it is displayed in Keychain Access'
      c.option '--password STRING', String, 'Password to use for the private key'
      c.action do |args, options|
        options.default path: "./", filename:"exported", password: ""

        begin
          raise "--name is required" unless options.name

          log "Info".blue, "Take all hands off your computer! exportation is going to take control of 'Keychain Access'".blue

          Exportation::Export.new(
            path: options.path,
            filename: options.filename,
            name: options.name,
            password: options.password
          ).run
        rescue Exception => e
          log "Error".red, e.message.red
        end

      end
    end

    command :encrypt do |c|
      c.syntax = 'exportation encrypt [options]'
      c.description = 'Encrypts certificates, private keys, and provisioning profiles with AES'
      c.option '--password STRING', String, 'Password to use for the encryption'
      c.option '--output STRING', String, 'Output directory for files (defaults to where original files are located)'
      c.option '--force', 'Forces all files to decrypted (will encrypt decrypted files)'
      c.action do |args, options|
        options.default output: nil

        begin
          raise "--password is required" unless options.password

          Exportation::Crypter.new(
            files: args,
            password: options.password,
            output: options.output
          ).run :en, options.force
        rescue Exception => e
          log "Error".red, e.message.red
        end

      end
    end

    command :decrypt do |c|
      c.syntax = 'exportation decrypt [options]'
      c.description = 'Decrypts certificates, private keys, and provisioning profiles with AES'
      c.option '--password STRING', String, 'Password to use for the decryption'
      c.option '--output STRING', String, 'Output directory for files (defaults to where original files are located)'
      c.option '--force', 'Forces all files to decrypted (will encrypt decrypted files)'
      c.action do |args, options|
        options.default output: nil

        begin
          raise "--password is required" unless options.password

          Exportation::Crypter.new(
            files: args,
            password: options.password,
            output: options.output
          ).run :de, options.force
        rescue Exception => e
          log "Error".red, e.message.red
        end

      end
    end

    run!
  end
end

ExportationApplication.new.run
